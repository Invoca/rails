diff --git a/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb b/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb
index 6307190..6bf1fd4 100644
--- a/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb
+++ b/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb
@@ -61,7 +61,7 @@ module ActiveRecord
         super()
 
         @active              = nil
-        @connection          = connection
+        self.connection      = connection
         @in_use              = false
         @instrumenter        = ActiveSupport::Notifications.instrumenter
         @last_use            = false
@@ -72,8 +72,22 @@ module ActiveRecord
         @query_cache_enabled = false
         @schema_cache        = SchemaCache.new self
         @visitor             = nil
+        @rows_read           = [] # RR patch
       end
 
+      protected
+
+      def connection=(new_connection)
+        @connection = new_connection
+        @connection_set_caller = caller
+      end
+
+      def non_nil_connection
+        @connection or raise "Connection is nil! It was assigned by:\n#{(@connection_set_caller || ['<none>']).join("\n")}"
+      end
+
+      public
+
       def lease
         synchronize do
           unless in_use
@@ -137,6 +151,12 @@ module ActiveRecord
         false
       end
 
+      # RR patch
+      def reset_rows_read
+        rows_read, @rows_read = @rows_read, []
+        rows_read
+      end
+
       # Does this adapter support index sort order?
       def supports_index_sort_order?
         false
@@ -274,10 +294,17 @@ module ActiveRecord
         def log(sql, name = "SQL", binds = [])
           @instrumenter.instrument(
             "sql.active_record",
-            :sql           => sql,
-            :name          => name,
-            :connection_id => object_id,
-            :binds         => binds) { yield }
+              hash = {
+              :sql           => sql,
+              :name          => name,
+              :connection_id => object_id,
+              :binds         => binds
+            }
+          ) do
+              yield.tap do |result|
+                hash[:rows] = result.count if result.respond_to?(:count)
+              end
+            end
         rescue Exception => e
           message = "#{e.class.name}: #{e.message}: #{sql}"
           @logger.debug message if @logger
