diff --git a/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb b/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb
index 08c3917..0f947b1 100644
--- a/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb
+++ b/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb
@@ -497,7 +497,9 @@ module ActiveRecord
       end
 
       def add_column_options!(sql, options) #:nodoc:
-        sql << " DEFAULT #{quote(options[:default], options[:column])}" if options_include_default?(options)
+        if options_include_default?(options) && !options[:default].nil? # RingRevenue patch - MySQL doesn't allow DEFAULT NULL with NOT NULL -- it's implied when DEFAULT omitted
+          sql << " DEFAULT #{quote(options[:default], options[:column])}" 
+        end
         # must explicitly check for :null to allow change_column to work on migrations
         if options[:null] == false
           sql << " NOT NULL"
@@ -555,7 +557,8 @@ module ActiveRecord
         end
 
         def options_include_default?(options)
-          options.include?(:default) && !(options[:null] == false && options[:default].nil?)
+          # RingRevenue patch - allow DEFAULT NULL statements
+          options.include?(:default)# && !(options[:null] == false && options[:default].nil?)
         end
 
         def add_index_options(table_name, column_name, options = {})
@@ -572,8 +575,11 @@ module ActiveRecord
           if index_name.length > index_name_length
             raise ArgumentError, "Index name '#{index_name}' on table '#{table_name}' is too long; the limit is #{index_name_length} characters"
           end
-          if index_name_exists?(table_name, index_name, false)
-            raise ArgumentError, "Index name '#{index_name}' on table '#{table_name}' already exists"
+          # RingRevenue patch
+          unless (options.key?(:check_for_existence) || options[:check_for_existence])
+            if index_name_exists?(table_name, index_name, false)
+              raise ArgumentError, "Index name '#{index_name}' on table '#{table_name}' already exists"
+            end
           end
           index_columns = quoted_columns_for_index(column_names, options).join(", ")
 
